<template>
  <editform v-if="selectedTravelOrderIdEdit > 0" :travelOrderId="selectedTravelOrderIdEdit" @cancel-edit="closeEdit"></editform>
  <div style="display: flex; flex-direction: column;">
    <h2 style="display: flex; flex-direction: row; align-self: center;" class="hist">History for:
      <select v-model="selectedStatus" id="status" class="styled-select">
        <option v-for="option in options" :key="option" :value="option">{{ option }}</option>
      </select>
      <span v-if="pendingCount !== 0" class="notification-count">{{ pendingCount }}</span>
    </h2>
    <div v-if="load" class="loadings">
      <img src='../../assets/loading.gif' width="auto" height="100px" />
    </div>
    <div style="display: flex; flex-direction: column; align-items: center;" v-if="otp">
      <otpz />
    </div>
    <div class="search" style="display: flex; flex-direction: row; justify-content: space-between; align-items: end; margin-top: 15px; margin-bottom: 10px; height: 35px;">
      <div v-if="mawala" style="display: flex; border: 2px solid black; border-radius: 5px; align-items: center; height: 30px; position: relative;">
        <img class="imgsearch" style="height: 20px; width:20px; position: relative; padding-left: 5px;" src="../../assets/search.png">
        <input class="pholder" type="text" v-model="searchQuery" placeholder="Search To number or Name">
      </div>
    </div>

    <div v-if="mawala" class="outer">
      <div v-if="showRatingPopup">
        <RatingPopup @submit="handleRating" @close="showRatingPopup = false" />
      </div>

      <EditDetailsPopup 
        v-if="showEditDetailsPopup" 
        :documents="currentItem.documents" 
        @submit="handleEditDetails" 
        @close="showEditDetailsPopup = false"   
      />

      
      <div class="scrollable-table" >
        
        <table>
          <thead>
            <tr>
              <th style="text-align: center;">Requestor</th>
              <th style="text-align: center;">Document Requested</th>
              <th style="text-align: center;">Date & Time</th>
              <th style="text-align: center;">Status</th>
              <th style="text-align: center;">Rating</th>
              <th style="text-align: center;">Action</th>
            </tr>
          </thead>
          <tbody>
          <tr v-for="(item, index) in reversedFormData" :key="index">
            <td>{{ getName(item.name_id) }}</td>
            <td>
                <span v-if="Array.isArray(item.documents) && item.documents.length">
                  <span v-for="(doc, docIndex) in item.documents" :key="docIndex">
                    {{ getDocumentName(doc) }} <br>
                  </span>
                </span>
                <span v-else>No documents requested</span>
              </td>
            
            <td>{{ item.date }}</td>
            <td>
              <span v-if="Array.isArray(item.documents) && item.documents.length">
                <span v-for="(doc, docIndex) in item.documents" :key="'remarks-' + docIndex">
                  {{ doc.remarks || 'No remarks' }} <br>
                </span>
              </span>
              <span v-else>No remarks</span>  
            </td>
            <td>
                <span v-if="item.rating !== null">    <span v-for="n in item.rating" :key="n">‚≠ê</span>
                </span>
                <button v-else @click="openRatingPopup(item)" :disabled="item.rating===0">Rating</button>
              </td>
              
        <td>

        <button @click="openEditDetailsPopup(item)">Edit</button>
       
        <button @click="generatePDF(item)">View PDF</button>
  
        <button @click="add(item)">Add Note</button>
        
        </td>
          </tr>
          <h1 style="text-align: center; margin-bottom: 0px;" v-if="reversedFormData.length == 0">NO MATCH FOUND</h1>
        </tbody>
        </table>
  
    <Note
      v-if="addNote || viewNote"
      @close-note="closeNote"
      @post-note="postNote"
      @focus-textarea="focusTextarea"
    />  

      </div>
    </div>
  </div>

</template>

<script>
import axios from 'axios';
import pdf from './../pdf.vue';
import editform from './../editform.vue';
import otpz from '../../components/otp.vue';
import { API_BASE_URL } from '@/config';
import RatingPopup from './Rating.vue';
import EditDetailsPopup from './EditDetailsPopup.vue';
import PDF from './PDF.vue';
import { jsPDF } from 'jspdf';
import Note from './Note.vue';
import { ref, watch } from 'vue';
import denrLogo from '@/assets/background_image.png'

export default {
  components: {
    jsPDF,
    PDF,
    pdf,
    otpz,
    editform,
    RatingPopup,
    EditDetailsPopup,
    Note,
  },


  setup() {
    const documents = ref([
      { name: 'PURCHASE REQUEST - REQUISITION AND ISSUE SLIP', checked: false },
      { name: 'CERTIFICATE OF EMPLOYMENT WITH COMPENSATION', checked: false },
      { name: 'INVENTORY CUSTODIAN SLIP', checked: false },
      { name: 'PROPERTY ACKNOWLEDGEMENT RECEIPT', checked: false },
      { name: 'GATE PASS', checked: false },
      { name: 'PO FUEL', checked: false },
      { name: 'PROPERTY RETURN SLIP', checked: false },
      { name: 'R&M OF MOTOR VEHICLES', checked: false },
      { name: 'JOB ORDER FOR FURNITURE & FIXTURES, LIGHTINGS, PLUMBING, & A/C', checked: false },
      { name: 'Others', checked: false }
    ]);

    // Assuming item is passed as a prop or fetched from somewhere
    const item = {
      documents: ['PURCHASE REQUEST - REQUISITION AND ISSUE SLIP', 'CERTIFICATE OF EMPLOYMENT WITH COMPENSATION' , 'INVENTORY CUSTODIAN SLIP',
      'PROPERTY ACKNOWLEDGEMENT RECEIPT','GATE PASS','PO FUEL','PROPERTY RETURN SLIP','R&M OF MOTOR VEHICLES','JOB ORDER FOR FURNITURE & FIXTURES, LIGHTINGS, PLUMBING, & A/C', 'Others'] // Example documents
    };
    const selectedDocument = ref(''); // This should be updated based on your form logic

    

    const requestedDocuments = ['Service Record', 'Certificate of Employment'];
// Watch for changes in the selected document
watch(selectedDocument, (newValue) => {
      // Uncheck all checkboxes first
      documents.value.forEach((doc) => {
        doc.checked = false;
      });

      const selectedDoc = documents.value.find(doc => doc.name === newValue);
      if (selectedDoc) {
        selectedDoc.checked = true; // Check the corresponding checkbox
      }
});
    // Function to check the documents based on the item.documents
    const checkDocuments = () => {
      documents.value.forEach(doc => {
        doc.checked = item.documents.includes(doc.name);
      });
    };

    // Call the function to set the initial checked state
    checkDocuments();

    return {
      documents,
      selectedDocument, 
    };
  },
  data() {
    return {
      addNote: false,
      logoPath: denrLogo,
      showEditDetailsPopup: false,
      selectedItemForEdit: null,
      showRatingPopup: false,
      showPdfModal: false,
      currentItem: '',
      selectedStatus: 'Me',
      options: ['Pending', 'Done', 'Me'],
      yearToday: new Date().getFullYear(),
      formData: [],
      names: {},
      employees: {},
      accountId: localStorage.getItem('accountId'),
      acc: [],
      load: true,
      mawala: false,
      addNote: false,
      viewNote: false,
      noteText: '',
      searchQuery: '',
      documents: [],
      selectedTravelOrderIdEdit: null,
      selectedTravelOrderId: null,
      requestor: '',
      divisions: [],
      date: '',
      documents: [
      { id: 'PURCHASE REQUEST - REQUISITION AND ISSUE SLIP', checked: false },
      { id: 'CERTIFICATE OF EMPLOYMENT WITH COMPENSATION', checked: false },
      { id: 'INVENTORY CUSTODIAN SLIP', checked: false },
      { id: 'PROPERTY ACKNOWLEDGEMENT RECEIPT', checked: false },
      { id: 'GATE PASS', checked: false },
      { id: 'PO FUEL', checked: false },
      { id: 'PROPERTY RETURN SLIP', checked: false },
      { id: 'R&M OF MOTOR VEHICLES', checked: false },
      { id: 'JOB ORDER FOR FURNITURE & FIXTURES, LIGHTINGS, PLUMBING, & A/C', checked: false },
      { id: 'OTHERS', checked: false }
      ],
      
      selectedDocuments: [],
      timeRequested: '',
      dateTimeReleased: '',
      rating: null,
    };
  },
  mounted() {
    this.fetchAccounts();
    this.fetchEmployees();
    this.fetchNames();
    this.fetchData(); // Fetch the form data when the component is mounted
    this.fetchDocuments();
    this.fetchDivisions();
  },
  methods: {
    fetchDivisions() {
    axios.get(`${API_BASE_URL}/get_divisions_json`) // Adjust the endpoint as necessary
      .then(response => {
        this.divisions = response.data; // Store the fetched divisions
      })
      .catch(error => {
        console.error('Error fetching divisions:', error);
      });
  },

  generatePDF(item) {
  this.$nextTick(() => {
    const printableElement = document.createElement("div");
    printableElement.id = "printableArea";
    printableElement.style.padding = "20px";
    printableElement.style.fontFamily = "Arial, sans-serif";
    printableElement.style.textAlign = "center";

    
    // Make sure documents is an array
    const requestedDocs = Array.isArray(item.documents) ? item.documents : JSON.parse(item.documents || '[]');
    
    // Extract the time from the date string
    // Assuming item.date is in a format like "YYYY-MM-DD HH:MM:SS" or contains time information
    let timeRequested = "";
    try {
      const dateObj = new Date(item.date);
      if (!isNaN(dateObj.getTime())) {
        // Format time as HH:MM AM/PM
        timeRequested = dateObj.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      }
    } catch (e) {
      console.error("Error parsing date:", e);
    }

    let othersText = "";
if (item.otherDocuments) {
  othersText = item.otherDocuments; // If directly storing the text in this property
} else if (typeof item.documents === 'string' && item.documents.includes('Others:')) {
  // Alternative: if you're storing it as "Others: TEXTHERE" in the documents array
  const othersMatch = item.documents.match(/Others:\s*(.+?)(?:,|$)/);
  if (othersMatch && othersMatch[1]) {
    othersText = othersMatch[1].trim();
  }
}
    
    // Function to generate rating option HTML based on current rating
    const generateRatingOption = (value, label) => {
  // Only parse and apply rating if it exists and is not null/undefined/empty
  const hasRating = item.rating !== undefined && item.rating !== null && item.rating !== '';
  const currentRating = hasRating ? parseInt(item.rating) : null;
  const isSelected = hasRating && currentRating === value;
  
  // Add revision text only for Very dissatisfied rating (value 1)
  const revisionText = value === 1 ? '<span style="margin-left: 370px; font-weight: normal;">revised document Feb 2025</span>' : '';
  
  return `
    <div class="rating-option ${isSelected ? 'selected' : ''}">
      <span class="star ${isSelected ? 'filled' : 'empty'}">${isSelected ? '‚òÖ' : '‚òÜ'}</span>
      <strong>${value} - ${label}</strong>
      ${revisionText}
    </div>
  `;
};


    
    printableElement.innerHTML = `
      <body>
        <div class="container">
          <div class="header">
            <div class="logo-section">
              <img src="${this.logoPath}" alt="DENR Logo" class="logo">
              <div class="title-section">
                <h3>Republic of the Philippines</h3>
                <h4>Department of Environment and Natural Resources</h4>
                <h4>MINES AND GEOSCIENCES BUREAU</h4>
                <h4>Regional Office No. X</h4>
                <p>DENR-X Compound, Puntod, Cagayan de Oro City</p>
                <p>Telefax Nos. (088) 856-2110;(088) 856-1331; Email: region10@mgb.gov.ph</p>
              </div>
            </div>
            <div class="certification-section">
              <div class="certification-images">
                <img src="/api/placeholder/50/50" alt="ISO Certification">
                <img src="/api/placeholder/50/50" alt="Quality Certification">
              </div>
            </div>
          </div>
          
          <div class="form-title">REQUEST SLIP FORM</div>
          <div class="admin-section">(Administrative Section-Procurement/Property)</div>
          
          <div class="form-content">
            <table>
              <tr class="form-row">
                <td><strong>Requestor:</strong></td>
                <td>${this.getName(item.name_id)}</td>
                <td rowspan="3"></td>
              </tr>
              <tr class="form-row">
                <td><strong>Division:</strong></td>
                <td>${this.findDivisionName(item.division_id)}</td>
              </tr>
              <tr class="form-row">
                <td><strong>Date & Time:</strong></td>
                <td>${item.date}</td>
              </tr>
              
              <tr class="documents-header">
                <td colspan="2">DOCUMENT(S) REQUESTED</td>
                <td style="width: 20%;">Time Requested</td>
                <td style="width: 30%;">Date and Time Released</td>
              </tr>

              <tr class="documents-row">
                <td><input type="checkbox" ${requestedDocs.includes('PURCHASE REQUEST - REQUISITION AND ISSUE SLIP') ? 'checked' : ''} /></td>
                <td>PURCHASE REQUEST - REQUISITION AND ISSUE SLIP</td>
                <td>${requestedDocs.includes('PURCHASE REQUEST - REQUISITION AND ISSUE SLIP') ? timeRequested : ''}</td>
                <td></td>
              </tr>
              <tr class="documents-row">
                <td><input type="checkbox" ${requestedDocs.includes('CERTIFICATE OF EMPLOYMENT WITH COMPENSATION') ? 'checked' : ''} /></td>
                <td>CERTIFICATE OF EMPLOYMENT WITH COMPENSATION</td>
                <td>${requestedDocs.includes('CERTIFICATE OF EMPLOYMENT WITH COMPENSATION') ? timeRequested : ''}</td>
                <td></td>
              </tr>
              <tr class="documents-row">
                <td><input type="checkbox" ${requestedDocs.includes('INVENTORY CUSTODIAN SLIP') ? 'checked' : ''} /></td>
                <td>INVENTORY CUSTODIAN SLIP</td>
                <td>${requestedDocs.includes('INVENTORY CUSTODIAN SLIP') ? timeRequested : ''}</td>
                <td></td>
              </tr>
              <tr class="documents-row">
                <td><input type="checkbox" ${requestedDocs.includes('PROPERTY ACKNOWLEDGEMENT RECEIPT') ? 'checked' : ''} /></td>
                <td>PROPERTY ACKNOWLEDGEMENT RECEIPT</td>
                <td>${requestedDocs.includes('PROPERTY ACKNOWLEDGEMENT RECEIPT') ? timeRequested : ''}</td>
                <td></td>
              </tr>
              <tr class="documents-row">
                <td><input type="checkbox" ${requestedDocs.includes('GATE PASS') ? 'checked' : ''} /></td>
                <td>GATE PASS</td>
                <td>${requestedDocs.includes('GATE PASS') ? timeRequested : ''}</td>
                <td></td>
              </tr>
              <tr class="documents-row">
                <td><input type="checkbox" ${requestedDocs.includes('PO FUEL') ? 'checked' : ''} /></td>
                <td>PO FUEL</td>
                <td>${requestedDocs.includes('PO FUEL') ? timeRequested : ''}</td>
                <td></td>
              </tr>
              <tr class="documents-row">
                <td><input type="checkbox" ${requestedDocs.includes('PROPERTY RETURN SLIP') ? 'checked' : ''} /></td>
                <td>PROPERTY RETURN SLIP</td>
                <td>${requestedDocs.includes('PROPERTY RETURN SLIP') ? timeRequested : ''}</td>
                <td></td>
              </tr>
              <tr class="documents-row">
                <td><input type="checkbox" ${requestedDocs.includes('R&M OF MOTOR VEHICLES') ? 'checked' : ''} /></td>
                <td>R&M OF MOTOR VEHICLES</td>
                <td>${requestedDocs.includes('R&M OF MOTOR VEHICLES') ? timeRequested : ''}</td>
                <td></td>
              </tr>
              <tr class="documents-row">
                <td><input type="checkbox" ${requestedDocs.includes('JOB ORDER FOR FURNITURE & FIXTURES, LIGHTINGS, PLUMBING, & A/C') ? 'checked' : ''} /></td>
                <td>JOB ORDER FOR FURNITURE & FIXTURES, LIGHTINGS, PLUMBING, & A/C</td>
                <td>${requestedDocs.includes('JOB ORDER FOR FURNITURE & FIXTURES, LIGHTINGS, PLUMBING, & A/C') ? timeRequested : ''}</td>
                <td></td>
              </tr>
<tr class="documents-row">
  <td><input type="checkbox" ${requestedDocs.includes('Others') ? 'checked' : ''} /></td>
  <td>Others: ${othersText ? othersText : '_______________________________'}</td>
  <td>${requestedDocs.includes('Others') ? timeRequested : ''}</td>
  <td></td>
</tr>
              
<tr>
  <td colspan="4" class="rating-label">RATING</td>
</tr>
<tr class="rating-row">
  <td colspan="4">
    ${generateRatingOption(4, 'Very Satisfied')}
    ${generateRatingOption(3, 'Satisfied')}
    ${generateRatingOption(2, 'Dissatisfied')}
    ${generateRatingOption(1, 'Very dissatisfied')}
  </td>
</tr>
            </table>
          </div>
        </div>
      </body>

      <style scoped>
        body {
          font-family: Arial, sans-serif;
          margin: 0;
          padding: 0;
          color: #000;
        }
        
        .container {
          width: 100%;
          max-width: 800px;
          margin: 0 auto;
          border: 1px solid #ccc;
        }
        
        .header {
          display: flex;
          border-bottom: 1px solid #ccc;
          padding: 10px;
        }
        
        .logo-section {
          display: flex;
          width: 70%;
        }
        
        .logo {
          width: 100px;
          height: 100px;
        }
        
        .title-section {
          padding-left: 10px;
          line-height: 1.2;
        }
        
        .title-section h3, .title-section h4 {
          margin: 0;
        }
        
        .title-section h3 {
          font-weight: normal;
        }
        
        .title-section h4 {
          color: #000080;
        }
        
        .title-section p {
          margin: 5px 0;
          font-size: 13px;
        }
        
        .certification-section {
          width: 30%;
          display: flex;
          justify-content: flex-end;
          align-items: center;
        }
        
        .certification-images img {
          height: 50px;
        }
        
        .form-title {
          text-align: center;
          font-weight: bold;
          font-size: 18px;
          margin: 10px 0;
        }
        
        .admin-section {
          text-align: center;
          margin-bottom: 10px;
          font-style: italic;
        }
        
        .form-content {
          width: 100%;
        }
        
        table {
          width: 100%;
          border-collapse: collapse;
        }
        
        td {
          border: 1px solid #ccc;
          padding: 5px 10px;
        }
        
        .form-row td:first-child {
          width: 20%;
          font-weight: bold;
        }
        
        .form-row td:nth-child(2) {
          width: 50%;
          border-bottom: 1px solid #000;
        }
        
        .form-row td:last-child {
          width: 30%;
        }
        
        .documents-header td {
          font-weight: bold;
          text-align: center;
        }
        
        .documents-row td:first-child {
          width: 5%;
          text-align: center;
        }
        
        .documents-row td:nth-child(2) {
          width: 50%;
        }
        
        .checkbox {
          width: 15px;
          height: 15px;
          border: 1px solid #000;
          display: inline-block;
        }
        
        .rating-row td {
          padding: 0;
        }
        
        .rating-label {
          font-weight: bold;
          padding: 5px 10px;
        }
        
        .star {
          display: inline-block;
          margin-right: 5px;
          color: #000080;
        }
        
        .rating-option {
        display: flex;
        align-items: center;
        margin: 5px 0;
        padding-left: 60px; /* Add space on the left for the revision text */

        }
        .rating-option.selected {
          font-weight: bold;
        }
        
        .star.filled {
          color: black;
        }
        
        .star.empty {
          color: #ccc;
        }
      </style>
    `;

    document.body.appendChild(printableElement);
    
    // Create an iframe for printing
    const printFrame = document.createElement('iframe');
    printFrame.style.display = 'none'; // Hide the iframe
    document.body.appendChild(printFrame); // Append it to the body

    // Prepare the content for the iframe
    const printDocument = printFrame.contentWindow.document;
    printDocument.open();
    printDocument.write(`
      <html>
        <head>
          <title>Print Request Slip</title>
          <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
            h2 { margin-bottom: 10px; }
          </style>
        </head>
        <body>${printableElement.innerHTML}</body>
      </html>
    `);
    printDocument.close();

    // Focus on the iframe and trigger print
    printFrame.contentWindow.focus();
    printFrame.contentWindow.print();

    // Clean up: remove the iframe after printing
    printFrame.parentNode.removeChild(printFrame);

    // Remove the printable element from the document
    document.body.removeChild(printableElement);
  });
},




    focusTextarea(text) {
      this.noteText = text;
      this.$refs.noteInput.focus();
    },
   
  AddNewNote(item) {
    this.selectedItemForEdit = item; // Set the selected item for edit
  },
  closeAddNewNote() {
    this.selectedItemForEdit = null; // Reset the selected item for edit
  },
    
  view(item) {
      // Implement the view functionality for the selected item
      console.log('Viewing item:', item);
  },
  add(item) {
  this.addNote = true;
  this.selectedItem = item;
  console.log('Adding note for item:', item);
},
  saveNote(noteText) {
      // Implement the logic to save the note
      // You can use the `selectedItem` to associate the note with the correct item
      console.log('Saving note:', noteText);
      // Call an API or update the data in your component
    },
    closeNote() {
      this.addNote = false;
    },
    closePdfModal() {
    this.showPdfModal = false;
  },
  getPdfUrl(travelOrderId) {
    return `${API_BASE_URL}/get_pdf/${travelOrderId}`;
  },
  printPDF() {
    this.$nextTick(() => {
      const iframe = this.$refs.pdfFrame;
      if (iframe) {
        iframe.contentWindow.print();
      }
    });
  },

  getDocumentName(doc) {
  if (!doc) return "No document";
  return typeof doc === "object" ? doc.name || "Unknown" : doc;
},

    getReleasedStatus(doc) {
  return doc.remarks?.trim() === 'Released' ? 'Released' : 'Unreleased';
},

openEditDetailsPopup(item) {
      this.currentItem = item; 
      this.showEditDetailsPopup = true; 
    },
    handleEditDetails(updatedDocuments) {
  if (!this.currentItem || !this.currentItem.id) {
    alert("No current item selected for update.");
    return;
  }

  const payload = {
    documents: updatedDocuments,
    remarks: updatedDocuments.map(doc => doc.remarks).join(', ') // Join remarks for storage
  };

  axios.post(`${API_BASE_URL}/FADupdate_request/${this.currentItem.id}`, payload)
    .then(response => {
      if (response.status === 200) {
        alert("Remarks updated successfully!");
        this.currentItem.documents = updatedDocuments; 
      }
    })
    .catch(error => {
      console.error("Error updating documents:", error);
      alert("Failed to update documents. Please try again.");
    });
},
    closeEdit() {
      this.selectedTravelOrderIdEdit = 0;
    },
    openRatingPopup(item) {
      this.currentItem = item; 
      this.showRatingPopup = true;
    },
    handleRating(rating) {
  const payload = {
    rating: rating 
  };

  // Use the existing update endpoint
  axios.post(`${API_BASE_URL}/FADRFupdate_request/${this.currentItem.id}`, payload)
    .then(response => {
      if (response.status === 200) {
        alert('Rating submitted successfully!');
        this.currentItem.rating = rating; 
      }
    })
    .catch(error => {
      console.error('Error submitting rating:', error);
      alert('Failed to submit rating. Please try again.');
    })
    .finally(() => {
      this.showRatingPopup = false; 
    });
    },
    openEditDetails(item) {
      this.selectedItem = item;
      this.showEditDetails = true;
    },
    printzz() {
      window.print();
    },
    closeNote() {
      this.addNote = false;
      this.viewNote = false;
    },
    postNote() {
      const formData = new FormData();
      formData.append('note', this.noteText);
      axios.post(`${API_BASE_URL}/update_form/${this.notenum}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      }).then(() => {
        this.fetchData();
        this.closeNote();
      }).catch(error => {
        console.error('Error:', error);
      });
    },
    fetchAccounts() {
      axios.get(`${API_BASE_URL}/get_accounts_json`)
        .then(response => {
          this.acc = response.data.find(result => result.account_id == this.accountId);
          this.fetchData();
        })
        .catch(error => {
          console.error('Error fetching data:', error);
        });
    },

    fetchData() {
      axios.get(`${API_BASE_URL}/FADRFget_request`)
        .then(response => {
          this.mawala = true;
          this.load = false;

          this.formData = response.data.map(item => {
          const documents = item.documents ? JSON.parse(item.documents) : [];

          return {
            ...item,
            documents: documents.map(doc => ({
              name: doc.name || doc, 
              remarks: doc.remarks?.trim() ? doc.remarks : 'No Remarks'
            })),
            rating: item.rating || null
          };
          });

          console.log(this.formData);
        })
        .catch(error => {
          console.error('Error fetching data:', error);
          this.load = false;
        });
    },
    fetchNames() {
      axios.get(`${API_BASE_URL}/get_names_json`)
        .then(response => {
          this.names = response.data;
        })
        .catch(error => {
          console.error('Error fetching names:', error);
        });
    },
    fetchEmployees() {
      axios.get(`${API_BASE_URL}/get_employees_json`)
        .then(response => {
          this.employees = response.data;
        })
        .catch(error => {
          console.error('Error fetching employees:', error);
        });
    },
    getName(nameId) {
      const name = this.names[nameId - 1];
      if (name) {
        const { first_name, middle_init, last_name } = name;
        return `${first_name.toUpperCase()} ${middle_init.toUpperCase()} ${last_name.toUpperCase()}`;
      }
      return 'Unknown';
    },
    findDivisionName(division_Id) {
  if (this.divisions && this.divisions.length > 0) {
    const division = this.divisions.find(div => div.division_id === division_Id);
    return division?.division_name || 'UNKNOWN';
  }
  return 'UNKNOWN';
},
    padWithZeroes(travel_order_id) {
  if (travel_order_id === undefined || travel_order_id === null) {
    console.warn('travel_order_id is undefined or null');
    return ''; // or return a default value, e.g., '0000'
  }
  const idString = travel_order_id.toString();
  return idString.padStart(4, '0');
},
    fetchDocuments() {
      axios.get(`${API_BASE_URL}/get_request`)
        .then(response => {
          this.documents = response.data;
        })
        .catch(error => {
          console.error('Error fetching documents:', error);
        });
    },
    
   
  },
  
  computed: {
  pendingCount() {
    return this.formData.filter(form => form.note === null && form.initial !== null).length;
  },
  reversedFormData() {
  return this.formData.slice().reverse().filter(item => {
    const paddedToNum = this.padWithZeroes(item.to_num);
    return paddedToNum.includes(this.searchQuery) || 
           String(this.getName(item.name_id)).toLowerCase().includes(this.searchQuery.toLowerCase());
  });
},
  canSaveNote() {
    return this.siga || this.siga1 || this.acc.name_id == 76 || this.acc.name_id == 37;
  },
},
};
</script>
  
  
  
  <style scoped>
  
  .notification-count {
    margin-top: -10px;
    margin-left: -10px;
    background-color: red;
    color: white;
    border-radius: 50%;
    width: 20px; /* Adjust size */
    height: 20px; /* Adjust size */
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 12px; /* Adjust font size */
  }
  
  .pholder {
    padding: 5px;
    border-radius: none;
    border: none;
    outline: none;
  }
  
  
  
  .Btn {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    width: 50px;
    height: 50px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    transition-duration: .3s;
    border: 2px solid black;
    margin-bottom: 2px;
    background-color: white;
  
  }
  .sign {
    width: 100%;
    transition-duration: .3s;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    left: 1px;
  }
  .tbody tr:hover {
  background-color: #e6e6e6;
}

  .tbody tr:nth-child(even) {
  background-color: #f5f5f5;
}
  
  .text {
    position: absolute;
    right: 0%;
    width: 0%;
    opacity: 0;
    color: black;
    font-size: 1.2em;
    font-weight: 500;
    transition-duration: .3s;
  }
  
  .Btn:hover {
    background-color: white;
    width: 230px;
    border: 2px solid black;
    border-radius: 5px;
    transition-duration: .3s;
    position: relative;
  
  }
  
  .Btn:hover .text {
    opacity: 1;
    width: 70%;
    transition-duration: .3s;
    padding-right: 10px;
  }
  
  .Btn:hover .sign {
    width: 30%;
    transition-duration: .3s;
    position: relative;
    left: -15px;
  }
  
  .Btn:active {
    transform: translate(2px, 2px);
  }
  
  
  table {
    width: 100%;
    border-collapse: collapse;
    font-family: 'Arial', sans-serif;
    font-size: 14px;
    font-weight: 500;
     border-radius: 8px;
  }
  
  th,
  td {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 10px;
  }
  
  th {
    background-color: #f2f2f2;
    position: sticky;
    top: -2px;
    width: 15%;
    
  }
  
  .scrollable-table {
    max-height: 630px;
    overflow-y: auto;
    margin: 15px;
    
  }
  
  .outer {
    border: 1px solid black;
    box-shadow: 0px 0px 4px black, 0px 0px 3px black inset;
    border-radius: 8px;
    width: 100%;
    
  }
 
  .loadings {
    top: 0;
    left: 0;
    width: fit-content;
    justify-self: center;
    display: flex;
    flex-direction: column;
    padding: 10px;
    margin: 10px auto;
    border-radius: 10px;
  }
  
  .loadings1 {

    height: 20px;
    width: 100%;
    text-align: center;
  }
  
  .loadings1,
  .loadings2 {
    font-weight: bold;
    font-size: 20px;
  }
  
  .note {
    width: 300px;
    background-color: #fff;
    border: 1px solid #ccc;
    border-radius: 5px;
    padding: 20px;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 100;
  }
  
  
  .title-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .butokz {
    display: flex;
    justify-content: space-around;
    align-items: center;
    margin-top: 20px;
  }
  
  .title {
    font-size: 20px;
    font-weight: bold;
  }
  
  .close-icon {
    cursor: pointer;
    font-size: 20px;
    color: #333;
  }
  
  .content {
    margin-top: 20px;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
  
  textarea {
    width: 100%;
    resize: vertical;
    height: 75px;
  }
  
  .request-slip-container {
  font-family: Arial, sans-serif;
  padding: 20px;
}

.header {
  text-align: center;
  margin-bottom: 20px;
}

.logo img {
  max-width: 100px;
}

.request-slip-form {
  border: 1px solid #ccc;
  padding: 20px;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  font-weight: bold;
}

.form-group input {
  width: 100%;
  padding: 5px;
  border: 1px solid #ccc;
}

.document-list {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 10px;
}

.document-item {
  display: flex;
  align-items: center;
}

.document-item input[type="checkbox"] {
  margin-right: 5px;
}

.rating-options label {
  display: block;
  margin-bottom: 5px;
}

.form-actions {
  text-align: center;
  margin-top: 20px;
}

.submit-btn {
  background-color: #007bff;
  color: #fff;
  border: none;
  padding: 10px 20px;
  cursor: pointer;
}
  button {
    border-radius: 10px;
    background: linear-gradient(150deg, #DDC7AD, #b3844f);
    border: solid black 2px;
    padding: 10px 20px;
    color: rgb(0, 0, 0);
    cursor: pointer;
    transition: background 0.3s;
    margin: 0 5px;
    height: fit-content;
    
  }
  
  button:hover {
    background-color: black;
    color: rgb(255, 255, 255);
  } 
  
  .styled-select {
    appearance: none;
    background-color: #f9f9f9;
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 10px;
    font-size: 16px;
    transition: border-color 0.3s;
    width: 100px;
    font-weight: bold;
    margin-top: -5px;
    margin-left: 5px;
  }
  
  .styled-select:focus {
    border-color: #007bff;
    outline: none;
  }
  
  .styled-select option {
    padding: 10px;
    font-weight: bold;
  }
  
  @media screen and (max-width: 768px) {
    .Btn{
      margin-right: 20px;
    }
  
   .prent {
      position: fixed;
      top: 0;
      left: 0;
      width: fit-content;
      height: 100%; 
      max-height: 1000px; 
      z-index: 9999; 
      height: 100vh;
      background-color: white;
    }
    .prent .buttons{
      display: flex;
      justify-content: space-evenly;
      margin-top: 70px;
      margin-bottom: 10px;
    }
  
  }
  
  @media print {
    .outer {
      display: none !important;
    }
  
    .hist {
      display: none !important;
    }
  
    .content,
    .search,
    .note,
    .sign,
    .Btn,
    .dropdown {
      display: none !important;
    }
    .buttons{
      display: none !important;
    }
  }
  </style>



editform ///////////////////


<template>
  <div class="EditForm-popup" @click="closeModal">
    <div class="popup-content" @click.stop> <!-- Prevents click on content from closing the modal -->
      <h3>Update Status</h3>
      <div class="status-select">
        <select v-model="status">
          <option value="Select-Status">Select Status</option>
          <option value="released">Released</option>
          <option value="unreleased">Unreleased</option>
        </select>
      </div>
      <div class="popup-buttons">
        <button type="button" :disabled="formDisable" @click="cancelEdit">X</button>
        <button type="submit" :disabled="formDisable">Save Changes</button>
      </div>
    </div>
  </div>
</template>



<style scoped>
.EditForm-popup {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.popup-content {
  background: rgba(126, 71, 9, 0.856);
  padding: 60px;
  border-radius: 8px;
  box-shadow: 0 0 10px rgb(218, 131, 0);
  text-align: center;
  color: #f0eaea;
}

.status-select {
  margin: 20px 0;
}

.status-select select {
  padding: 8px 12px;
  font-size: 16px;
  border-radius: 4px;
  width: 200px;
  background-color: white;
  border: 2px solid black;
}

.popup-buttons {
  display: flex;
  justify-content: space-between;
  margin-top: 10px;
  gap: 10px;
  position: relative; /* Added to position the close button */
}

.popup-buttons button {
  position: relative;
  overflow: hidden;
  cursor: pointer;
  background-color: transparent;
  border: 2px solid black;
  padding: 10px 20px;
  font-size: 16px;
  color: #f0eaea;
  transition: color 0.3s ease-in-out, border-color 0.3s ease-in-out;
}

.popup-buttons button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.popup-buttons button::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background-color: rgba(162, 123, 92, 0.856);
  transition: left 0.3s ease-in-out;
  z-index: -1;
}

.popup-buttons button:not(:disabled):hover::before {
  left: 0;
}

.popup-buttons button:not(:disabled):hover {
  color: white;
  border-color: rgba(162, 123, 92, 0.856);
}

/* New CSS for the Close button */
.popup-buttons button:first-child { /* Close button */
  position: absolute;
  top: -170px; /* Keep it higher */
  right: -50px; /* Move it more to the right */
  padding: 10px; /* Adjust padding if needed */
  font-size: 20px; /* Adjust the font size */
  background-color: transparent;
  border: none; /* Optional: Remove button border */
  color: #f0eaea;
  cursor: pointer;
}
.popup-buttons button:nth-child(2)::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background-color: white;  /* Set background to white */
  transition: left 0.3s ease-in-out;
  z-index: -1;
}

.popup-buttons button:nth-child(2):not(:disabled):hover::before {
  left: 0;
}

.popup-buttons button:nth-child(2):not(:disabled):hover {
  color: white;  /* Change text color to match the background */
  border-color: rgba(162, 123, 92, 0.856);
}
</style>
