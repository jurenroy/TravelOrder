Table vue

<template>
  <editform v-if="selectedTravelOrderIdEdit > 0" :travelOrderId="selectedTravelOrderIdEdit" @cancel-edit="closeEdit"></editform>
  <div class="note" v-if="addNote">
    <div class="title-bar">
      <div class="title">Add note</div>
      <div class="close-icon" @click="closeNote">X</div>
    </div>
    <div class="content">
      <textarea v-model="noteText" rows="3" placeholder="Enter your note here"></textarea>
      <div style="display: flex; flex-direction: row; justify-content: space-evenly;">
        <button style="font-size: 12px;" @click="focusTextarea('Within WFP')" v-if="acc.name_id == 37"> Within WFP </button>
        <button style="font-size: 12px;" @click="focusTextarea('Not within WFP')" v-if="acc.name_id == 37"> Not within WFP </button>
      </div>
      <div class="butokz">
        <button @click="postNote">Save</button>
        <button @click="closeNote">Cancel</button>
      </div>
    </div>
  </div>
  <div class="note" v-if="viewNote">
    <div class="title-bar">
      <div class="title">View note</div>
    </div>
    <div class="content">
      <textarea v-model="noteText" rows="3"></textarea>
      <div class="butokz">
        <button @click="postNote" v-if="canSaveNote">Save</button>
        <button @click="closeNote">Close</button>
      </div>
    </div>
  </div>

  <div style="display: flex; flex-direction: column;">
    <h2 style="display: flex; flex-direction: row; align-self: center;" class="hist">History for:
      <select v-model="selectedStatus" id="status" class="styled-select">
        <option v-for="option in options" :key="option" :value="option">{{ option }}</option>
      </select>
      <span v-if="pendingCount !== 0" class="notification-count">{{ pendingCount }}</span>
    </h2>
    <div v-if="load" class="loadings">
      <img src='../../assets/loading.gif' width="auto" height="100px" />
    </div>
    <div style="display: flex; flex-direction: column; align-items: center;" v-if="otp">
      <otpz />
    </div>
    <div class="search" style="display: flex; flex-direction: row; justify-content: space-between; align-items: end; margin-top: 15px; margin-bottom: 10px; height: 35px;">
      <div v-if="mawala" style="display: flex; border: 2px solid black; border-radius: 5px; align-items: center; height: 30px; position: relative;">
        <img class="imgsearch" style="height: 20px; width:20px; position: relative; padding-left: 5px;" src="../../assets/search.png">
        <input class="pholder" type="text" v-model="searchQuery" placeholder="Search TO number or Name">
      </div>
    </div>

    <div v-if="mawala" class="outer">
      <div v-if="showRatingPopup">
        <RatingPopup @submit="handleRating" @close="showRatingPopup = false" />
      </div>

      <EditDetailsPopup 
        v-if="showEditDetailsPopup" 
        :documents="currentItem.documents" 
        @submit="handleEditDetails" 
        @close="showEditDetailsPopup = false"   
      />
      <div class="scrollable-table">
        <table>
          <thead>
            <tr>
              <th style="text-align: center;">Requestor</th>
              <th style="text-align: center;">Document Requested</th>
              <th style="text-align: center;">Date & Time</th>
              <th style="text-align: center;">Status</th>
              <th style="text-align: center;">Rating</th>
              <th style="text-align: center;">Action</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="(item, index) in formData" :key="index">
              <td>{{ getName(item.name_id) }}</td>
              <td>
                <span v-if="Array.isArray(item.documents) && item.documents.length">
                  <span v-for="(doc, docIndex) in item.documents" :key="docIndex">
                    {{ getDocumentName(doc) }} <br>
                  </span>
                </span>
                <span v-else>No documents requested</span>
              </td>
              <td>{{ item.date }}</td>
              <td>
                <span v-if="Array.isArray(item.documents) && item.documents.length">
                  <span v-for="(doc, docIndex) in item.documents" :key="'remarks-' + docIndex">
                    {{ doc.remarks || 'No remarks' }} <br>
                  </span>
                </span>
                <span v-else>No remarks</span>
              </td>
              <td>
                <span v-if="item.rating !== null">
                  <span v-for="n in item.rating" :key="n">‚≠ê</span>
                </span>
                <button v-else @click="openRatingPopup(item)" :disabled="item.rating===0">Rating</button>
              </td>

              <td>
                <button @click="openEditDetailsPopup(item)">Edit</button>
                <button @click="view(item)">View</button>
                <button @click="add(item)">Add Note</button>
              </td> 
            </tr>
            <h1 style="text-align: center; margin-bottom: 0px;" v-if="formData.length == 0">NO REQUEST FOUND</h1>
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <div v-show="selectedTravelOrderId" class="prent full-screen">
    <div class="buttons">
      <button @click="printzz">Download as PDF</button>
      <button @click="close">Close PDF</button>
    </div>
    <pdf :travel_order_id="selectedTravelOrderId"></pdf>
  </div>
</template>

<script>
import axios from 'axios';
import pdf from './../pdf.vue';
import editform from './../editform.vue';
import otpz from '../../components/otp.vue';
import RatingPopup from './rating.vue';
import { API_BASE_URL } from '@/config';
import EditDetailsPopup from './EditDetailsPopup.vue';

export default {
  components: {
    pdf,
    otpz, 
    RatingPopup,
    editform,
    EditDetailsPopup,
  },
  data() {
    return {
      showRatingPopup: false,
      showEditDetailsPopup: false,
      currentItem: '',
      selectedStatus: 'Me',
      options: ['Pending', 'Done', 'Me'],
      yearToday: new Date().getFullYear(),
      formData: [],
      names: {},
      employees: {},
      accountId: localStorage.getItem('accountId'),
      acc: [],
      load: true,
      mawala: false,
      addNote: false,
      viewNote: false,
      noteText: '',
      searchQuery: '',
      documents: [],
    };
  },
  mounted() {
    this.fetchAccounts();
    this.fetchEmployees();
    this.fetchNames();
    this.fetchData(); 
    this.fetchDocuments();
  },
  methods: {
    focusTextarea(text) {
      this.noteText = text;
      this.$refs.noteInput.focus();
    },
    openRatingPopup(item) {
      this.currentItem = item; 
      this.showRatingPopup = true;
    },
    getDocumentName(doc) {
  if (!doc) return "No document";
  return typeof doc === "object" ? doc.name || "Unknown" : doc;
},

    getReleasedStatus(doc) {
  return doc.remarks?.trim() === 'Released' ? 'Released' : 'Unreleased';
},

    openEditDetailsPopup(item) {
      this.currentItem = item; 
      this.showEditDetailsPopup = true; 
    },
    handleEditDetails(updatedDocuments) {
  if (!this.currentItem || !this.currentItem.id) {
    alert("No current item selected for update.");
    return;
  }

  const payload = {
    documents: updatedDocuments,
    remarks: updatedDocuments.map(doc => doc.remarks).join(', ') // Join remarks for storage
  };

  axios.post(`${API_BASE_URL}/update_request/${this.currentItem.id}`, payload)
    .then(response => {
      if (response.status === 200) {
        alert("Remarks updated successfully!");
        this.currentItem.documents = updatedDocuments; 
      }
    })
    .catch(error => {
      console.error("Error updating documents:", error);
      alert("Failed to update documents. Please try again.");
    });
},
    handleRating(rating) {
      const payload = { rating: rating };
      axios.post(`${API_BASE_URL}/update_request/${this.currentItem.id}`, payload)
        .then(response => {
          if (response.status === 200) {
            alert('Rating submitted successfully!');
            this.currentItem.rating = rating; 
          }
        })
        .catch(error => {
          console.error('Error submitting rating:', error);
          alert('Failed to submit rating. Please try again.');
        })
        .finally(() => {
          this.showRatingPopup = false; 
        });
    },
    closeEdit() {
      this.selectedTravelOrderIdEdit = 0;
    },
    printzz() {
      window.print();
    },
    closeNote() {
      this.addNote = false;
      this.viewNote = false;
    },
    postNote() {
      const formData = new FormData();
      formData.append('note', this.noteText);
      axios.post(`${API_BASE_URL}/update_form/${this.notenum}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      }).then(() => {
        this.fetchData();
        this.closeNote();
      }).catch(error => {
        console.error('Error:', error);
      });
    },
    fetchAccounts() {
      axios.get(`${API_BASE_URL}/get_accounts_json`)
        .then(response => {
          this.acc = response.data.find(result => result.account_id == this.accountId);
          this.fetchData();
        })
        .catch(error => {
          console.error('Error fetching data:', error);
        });
    },
    fetchData() {
      axios.get(`${API_BASE_URL}/get_request`)
        .then(response => {
          this.mawala = true;
          this.load = false;

          this.formData = response.data.map(item => {
          const documents = item.documents ? JSON.parse(item.documents) : [];

          return {
            ...item,
            documents: documents.map(doc => ({
              name: doc.name || doc, 
              remarks: doc.remarks?.trim() ? doc.remarks : 'No Remarks'
            })),
            rating: item.rating || null
          };
          });

          console.log(this.formData);
        })
        .catch(error => {
          console.error('Error fetching data:', error);
          this.load = false;
        });
    },
    fetchNames() {
      axios.get(`${API_BASE_URL}/get_names_json`)
        .then(response => {
          this.names = response.data;
        })
        .catch(error => {
          console.error('Error fetching names:', error);
        });
    },
    fetchEmployees() {
      axios.get(`${API_BASE_URL}/get_employees_json`)
        .then(response => {
          this.employees = response.data;
        })
        .catch(error => {
          console.error('Error fetching employees:', error);
        });
    },
    getName(nameId) {
      const name = this.names[nameId - 1];
      if (name) {
        const { first_name, middle_init, last_name } = name;
        return `${first_name.toUpperCase()} ${middle_init.toUpperCase()} ${last_name.toUpperCase()}`;
      }
      return 'Unknown'; 
    },
    padWithZeroes(travel_order_id) {
      const idString = travel_order_id.toString();
      return idString.padStart(4, '0');
    },
    fetchDocuments() {
      axios.get(`${API_BASE_URL}/get_request`)
        .then(response => {
          this.documents = response.data;
        })
        .catch(error => {
          console.error('Error fetching documents:', error);
        });
    },
  },
  computed: {
    pendingCount() {
      return this.formData.filter(form => form.note === null && form.initial !== null).length;
    },
    reversedFormData() {
      return this.formData.slice().reverse().filter(item => {
        return String(this.padWithZeroes(item.to_num)).includes(this.searchQuery) || String(this.getName(item.name_id)).toLowerCase().includes(this.searchQuery.toLowerCase());
      });
    },
    canSaveNote() {
      return this.siga || this.siga1 || this.acc.name_id == 76 || this.acc.name_id == 37;
    },
  },
};
</script>

//////////////////////////////////////////////////////

edit EditDetailsPopup


<template>
  <div class="edit-action-popup">
    <div class="popup-content">
      <h2> Document Remarks</h2>
      <div v-for="(document, index) in documents" :key="index" class="document-status">
        <span>{{ document.name }}</span>
        <!-- Single button to toggle between Release and Unrelease -->
        <button @click="toggleRemarks(index)">
          {{ document.remarks === 'Released' ? 'Unrelease' : 'Release' }}
        </button>
        <span v-if="document.remarks === 'Released'" class="status-indicator">Released</span>
        <span v-if="document.remarks === 'Unreleased'" class="status-indicator">Unreleased</span>
      </div>
      <div class="status-summary">
        <p>Status: {{ getOverallRemarks() }}</p>
      </div>
      <div class="close-button" @click="closePopup">X</div> <!-- Close button -->
    </div>
  </div>
</template>

<script>
export default {
  props: {
    documents: {
      type: Array,
      required: true
    }
  },
  methods: {
    toggleRemarks(index) {
      // Check the current state of the remarks
      const currentRemark = this.documents[index].remarks;

      // Toggle the remarks of the document
      this.documents[index].remarks = currentRemark === 'Released' ? 'Unreleased' : 'Released';

      // Show an alert based on the new state
      if (this.documents[index].remarks === 'Released') {
        alert(`Document "${this.documents[index].name}" has been released.`);
      } else {
        alert(`Document "${this.documents[index].name}" has been unreleased.`);
      }

      // Emit the updated documents to the parent component
      this.emitUpdatedDocuments();
    },
    getOverallRemarks() {
      console.log(this.documents)
      const totalDocuments = this.documents.length;
      const releasedCount = this.documents.filter(doc => doc.remarks === 'Released').length;

      if (releasedCount === totalDocuments && totalDocuments > 0) {
        return 'All documents released';
      } else {
        return `${releasedCount}/${totalDocuments} documents`;
      }

      
    },
    emitUpdatedDocuments() {
      // Emit the updated documents to the parent component
      this.$emit('submit', this.documents);
    },
    closePopup() {
      // Emit an event to close the popup without submitting
      this.$emit('close');
    }
  }
};      
</script>

<style scoped>
.edit-action-popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.popup-content {
  background: white;
  padding: 20px;
  border-radius: 5px;
  text-align: center;
}

.document-status {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 10px 0;
}

.status-summary {
  margin-top: 20px;
}

.buttons {
  margin-top: 20px;
}
.status-indicator {
  color: green; /* Change color as needed */
  margin-left: 10px;
}
.close-button {
  cursor: pointer;
  color: red; /* Change color as needed */
  font-weight: bold;
  margin-top: 10px;
  text-align: right; /* Align to the right */
}
</style>

